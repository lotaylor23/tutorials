#bash install appropriate libraries
#####pip install requests beautifulsoup4 schedule

import requests
from bs4 import BeautifulSoup
import re
import schedule
import time

#Script to Scrape Threat Indicators: This script scrapes threat data (IPs and domains) from a given URL every 30 minutes.

# Define a function to extract threat data (IP addresses and domains) from a page
def extract_threat_data(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    
    # Example of looking for IP addresses and domains in <h2> or <a> tags
    ip_addresses = set(re.findall(r'\b(?:\d{1,3}\.){3}\d{1,3}\b', soup.get_text()))
    domains = set(re.findall(r'[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', soup.get_text()))

    print(f"Found IPs: {ip_addresses}")
    print(f"Found Domains: {domains}")

    return ip_addresses, domains

# Example URL for scraping (could be a security news page or forum)
def monitor_threats():
    url = "https://www.bleepingcomputer.com/news/security/"
    ip_addresses, domains = extract_threat_data(url)

    # Here you could send these to your threat detection system or log them
    # For now, let's just print them
    print(f"Extracted IPs: {ip_addresses}")
    print(f"Extracted Domains: {domains}")

# Schedule scraping every 30 minutes
schedule.every(30).minutes.do(monitor_threats)

while True:
    schedule.run_pending()
    time.sleep(1)


#Storing Collected Data:
import sqlite3

# Create a connection to the database (or create one if it doesn't exist)
conn = sqlite3.connect('threat_data.db')
cursor = conn.cursor()

# Create a table to store the IPs and domains
cursor.execute('''
    CREATE TABLE IF NOT EXISTS threats (
        id INTEGER PRIMARY KEY,
        threat_type TEXT,
        value TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
''')

# Function to insert threats into the database
def insert_threat(threat_type, value):
    cursor.execute('''
        INSERT INTO threats (threat_type, value) VALUES (?, ?)
    ''', (threat_type, value))
    conn.commit()

# Save IPs and Domains in the database
def store_threat_data(ip_addresses, domains):
    for ip in ip_addresses:
        insert_threat('IP', ip)
    for domain in domains:
        insert_threat('Domain', domain)

# Now you can integrate this function in the scraping process
def monitor_threats():
    url = "https://www.bleepingcomputer.com/news/security/"
    ip_addresses, domains = extract_threat_data(url)
    store_threat_data(ip_addresses, domains)

# send an email alert when a new threat is detected:
#Real-Time Detection and Response:
#If your security infrastructure includes an Intrusion Detection System (IDS) like Snort or Suricata, you can automate the response process by:

#Blocking malicious IPs in firewall rules.

#Alerting your SOC team about specific domains/IPs via email, Slack, etc.

#Automatically generating reports and integrating with your SIEM.

import smtplib
from email.mime.text import MIMEText

def send_alert(subject, body):
    sender = "your-email@example.com"
    receiver = "security-team@example.com"
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = sender
    msg['To'] = receiver
    
    with smtplib.SMTP('smtp.example.com') as server:
        server.sendmail(sender, receiver, msg.as_string())

# Send an alert when new threats are detected
def alert_new_threats(ip_addresses, domains):
    if ip_addresses or domains:
        message = f"New threats detected:\nIP Addresses: {ip_addresses}\nDomains: {domains}"
        send_alert("New Threats Detected", message)

# Integrating with Existing Security Infrastructure
#Now that we have our data collected and stored, you can integrate the threat data with your existing security systems.

#SIEM Integration: You can push these IPs and domains into a SIEM like Splunk or Elastic Stack to correlate with existing logs.

#Firewall Rules: Automatically add IP addresses to block lists.

#Intrusion Prevention Systems (IPS): Automatically configure IPS signatures to block suspicious traffic.

#For Splunk, you could use the Splunk SDK for Python to send alerts:

#bash install appropriate libraries
#####pip install splunk-sdk
from splunklib.client import Service

def send_to_splunk(ip_addresses, domains):
    service = Service(
        username='admin',
        password='password',
        host='splunk-server',
        port=8089
    )
    
    # Example event
    event_data = {
        "event": f"Malicious IPs: {ip_addresses}, Domains: {domains}",
        "sourcetype": "threat_indicator",
        "index": "threats"
    }
    
    service.indexes["main"].submit(**event_data)
